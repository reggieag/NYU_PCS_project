/*
 * Toy API
 *
 * Toy API for testing RESTler
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"net/http"
)

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
	db ToyAPIDB
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService(db ToyAPIDB) DefaultApiServicer {
	return &DefaultApiService{
		db,
	}
}

// DataDataIdDelete - Delete data by id
func (s *DefaultApiService) DataDataIdDelete(ctx context.Context, dataId int32) (ImplResponse, error) {
	err := s.db.DeleteDataByID(ctx, int(dataId))
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	return Response(http.StatusOK, nil), nil
}

// DataDataIdGet - Get data by id
func (s *DefaultApiService) DataDataIdGet(ctx context.Context, dataId int32) (ImplResponse, error) {
	resp, err := s.db.GetDataByID(ctx, int(dataId))
	if err != nil {
		return Response(http.StatusNotFound, nil), nil
	}
	return Response(http.StatusOK, resp), nil
}

// DataDataIdPost - Update data by id
func (s *DefaultApiService) DataDataIdPost(ctx context.Context, dataId int32, inlineObject1 InlineObject1) (ImplResponse, error) {
	// TODO - update DataDataIdPost with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Object{}) or use other options such as http.Ok ...
	//return Response(200, Object{}), nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("DataDataIdPost method not implemented")
}

// DataGet - Returns a list of data.
func (s *DefaultApiService) DataGet(ctx context.Context) (ImplResponse, error) {
	// TODO - update DataGet with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, []Object{}) or use other options such as http.Ok ...
	//return Response(200, []Object{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("DataGet method not implemented")
}

// DataPost - Add a new entry
func (s *DefaultApiService) DataPost(ctx context.Context, inlineObject InlineObject) (ImplResponse, error) {
	// TODO - update DataPost with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Object{}) or use other options such as http.Ok ...
	//return Response(200, Object{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("DataPost method not implemented")
}
