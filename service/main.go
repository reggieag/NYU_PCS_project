/*
 * Toy API
 *
 * Toy API for testing RESTler
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"log"
	"net/http"
	"os"
	"strconv"
	"time"

	"github.com/gorilla/handlers"
	openapi "github.com/reggieag/NYU_PCS_project/server/internal"
)

func main() {
	log.Printf("Server started")

	dbHost := os.Getenv("POSTGRES_HOST")
	dbUser := os.Getenv("POSTGRES_USER")
	dbPassword := os.Getenv("POSTGRES_PASSWORD")
	dbName := os.Getenv("POSTGRES_DB")
	dbPortStr := os.Getenv("POSTGRES_PORT")
	dbPort, err := strconv.Atoi(dbPortStr)

	if err != nil {
		log.Fatalf("unable to parse DB port: %s", err)
	}
	db, err := retryDbConnection(dbHost, dbPort, dbUser, dbPassword, dbName)
	if err != nil {
		log.Fatalf("unable to init db: %s", err)
	}
	defer db.Close()

	authUrl := os.Getenv("OAUTH_URL")

	DefaultAPIService := openapi.NewDefaultApiService(db)
	DefaultAPIController := openapi.NewDefaultApiController(DefaultAPIService, openapi.AuthMiddleware(authUrl))
	pingHandler := openapi.NewPingController()

	router := openapi.NewRouter(DefaultAPIController, pingHandler)

	log.Printf("service starting on port 8080")

	log.Fatal(http.ListenAndServe(":8080",
		handlers.RecoveryHandler(handlers.PrintRecoveryStack(true))(router)))
}

func retryDbConnection(dbHost string, dbPort int, dbUser string, dbPassword string, dbName string) (*openapi.APIDatabase, error) {
	const maxRetries = 5
	const timeoutInterval = time.Second
	var err error
	var db *openapi.APIDatabase
	for i := 0; i != maxRetries; i++ {
		log.Printf("attempting to create db")
		db, err = openapi.NewDBConn(dbHost, dbPort, dbUser, dbPassword, dbName)
		if err == nil {
			log.Printf("created db connection")
			return db, nil
		}
		sleepDuration := timeoutInterval * time.Duration(i)
		log.Printf("unable to create db connection. Trying again in: %f", sleepDuration.Seconds())
		time.Sleep(sleepDuration)
	}
	return nil, err
}
